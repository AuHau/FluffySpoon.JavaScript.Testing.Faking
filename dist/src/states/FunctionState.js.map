{"version":3,"file":"FunctionState.js","sourceRoot":"","sources":["../../../src/states/FunctionState.ts"],"names":[],"mappings":"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","sourcesContent":["import { ContextState, PropertyKey } from \"./ContextState\";\r\nimport { Context } from \"src/Context\";\r\nimport { stringifyArguments, stringifyCalls, areArgumentsEqual, areArgumentArraysEqual } from \"../Utilities\";\r\nimport { GetPropertyState } from \"./GetPropertyState\";\r\nimport { Argument, Arg } from \"../Arguments\";\r\n\r\nconst Nothing = Symbol();\r\n\r\nexport class FunctionState implements ContextState {\r\n    private returns: any[]|Symbol;\r\n    private mimicks: Function|null;\r\n\r\n    private _callCount: number;\r\n    private _arguments: any[];\r\n\r\n    public get arguments() {\r\n        return this._arguments;\r\n    }\r\n\r\n    public get callCount() {\r\n        return this._callCount;\r\n    }\r\n\r\n    public get property() {\r\n        return this._getPropertyState.property;\r\n    }\r\n\r\n    constructor(private _getPropertyState: GetPropertyState, ...args: any[]) {\r\n        this.returns = Nothing;\r\n        this.mimicks = null;\r\n\r\n        this._arguments = args;\r\n        this._callCount = 0;\r\n    }\r\n\r\n    apply(context: Context, args: any[], matchingFunctionStates: FunctionState[]) {\r\n        let callCount = this._callCount;\r\n        const hasExpectations = context.initialState.hasExpectations;\r\n        if(!matchingFunctionStates) {\r\n            matchingFunctionStates = this._getPropertyState\r\n                .recordedFunctionStates\r\n                .filter(x => areArgumentArraysEqual(x.arguments, args));\r\n        }\r\n\r\n        if(hasExpectations) {\r\n            callCount = matchingFunctionStates\r\n                .filter(x => x._arguments[0] !== Arg.all())\r\n                .map(x => x.callCount)\r\n                .reduce((a, b) => a + b, 0);\r\n        }\r\n\r\n        context.initialState.assertCallCountMatchesExpectations(\r\n            this._getPropertyState.recordedFunctionStates,\r\n            callCount,\r\n            'method',\r\n            this.property,\r\n            args);\r\n\r\n        if(!hasExpectations) {\r\n            this._callCount++;\r\n\r\n            for(let matchingFunctionState of matchingFunctionStates)\r\n            for(let argument of matchingFunctionState.arguments) {\r\n                if(!(argument instanceof Argument))\r\n                    continue;\r\n\r\n                const indexOffset = matchingFunctionState\r\n                    .arguments\r\n                    .indexOf(argument);\r\n                const myArg = args[indexOffset];\r\n                if(myArg instanceof Argument)\r\n                    continue;\r\n\r\n                argument.encounteredValues.push(myArg);\r\n            }\r\n        }\r\n\r\n        if(this.mimicks)\r\n            return this.mimicks.apply(this.mimicks, args);\r\n\r\n        if(this.returns === Nothing)\r\n            return context.proxy;\r\n\r\n        var returnsArray = this.returns as any[];\r\n        if(returnsArray.length === 1)\r\n            return returnsArray[0];\r\n\r\n        return returnsArray[this._callCount-1];\r\n    }\r\n\r\n    set(context: Context, property: PropertyKey, value: any) {\r\n    }\r\n\r\n    get(context: Context, property: PropertyKey) {\r\n        if (property === 'then')\r\n            return void 0;\r\n\r\n        if(property === 'mimicks') {\r\n            return (input: Function) => {\r\n                this.mimicks = input;\r\n                this._callCount--;\r\n\r\n                context.state = context.initialState;\r\n            }\r\n        }\r\n\r\n        if(property === 'returns') {\r\n            if(this.returns !== Nothing)\r\n                throw new Error('The return value for the function ' + this._getPropertyState.toString() + ' with ' + stringifyArguments(this._arguments) + ' has already been set to ' + this.returns);\r\n\r\n            return (...returns: any[]) => {\r\n                this.returns = returns;\r\n                this._callCount--;\r\n\r\n                if(this._callCount === 0) {\r\n                    var indexOfSelf = this\r\n                        ._getPropertyState\r\n                        .recordedFunctionStates\r\n                        .indexOf(this);\r\n                    this._getPropertyState\r\n                        .recordedFunctionStates\r\n                        .splice(indexOfSelf, 1);\r\n                }\r\n\r\n                context.state = context.initialState;\r\n            };\r\n        }\r\n\r\n        return context.proxy;\r\n    }\r\n}"]}
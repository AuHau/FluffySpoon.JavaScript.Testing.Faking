{"version":3,"file":"Transformations.js","sourceRoot":"","sources":["../../src/Transformations.ts"],"names":[],"mappings":"","sourcesContent":["export type FunctionSubstitute<F extends any[], T> = (...args: F) => (T & MockObjectMixin<T>)\r\n\r\nexport type PropertySubstitute<T> = T & Partial<MockObjectMixin<T>>\r\n\r\ntype MockObjectMixin<T> = {\r\n    returns: (...args: T[]) => void;\r\n}\r\n\r\nexport type ObjectSubstitute<T extends Object> = ObjectSubstituteTransformation<T> & {\r\n    received(amount?: number): T;\r\n}\r\n\r\ntype ObjectSubstituteTransformation<T extends Object> = {\r\n    [P in keyof T]:\r\n    T[P] extends (...args: infer F) => infer R ? FunctionSubstitute<F, R> :\r\n    PropertySubstitute<T[P]>;\r\n}"]}
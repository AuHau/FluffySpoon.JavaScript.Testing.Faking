{"version":3,"file":"Substitute.js","sourceRoot":"","sources":["../../src/Substitute.ts"],"names":[],"mappings":"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","sourcesContent":["import { ObjectSubstitute } from \"./Transformations\";\r\nimport { ProxyObjectContext, ProxyPropertyContext, ProxyMethodPropertyContext } from \"./Context\";\r\nimport { stringifyCalls } from \"./Utilities\";\r\n\r\nexport class Substitute {\r\n    static for<T>(): ObjectSubstitute<T> {\r\n        const objectContext = new ProxyObjectContext();\r\n        \r\n        let thisProxy: ObjectSubstitute<T>;\r\n        return thisProxy = new Proxy(() => { }, {\r\n            apply: (_target, _thisArg, argumentsList) => {\r\n                const propertyContext = objectContext.property;\r\n                if(propertyContext.type === 'function') {\r\n                    console.log(objectContext.calls.actual.map(x => x.property).filter(x => x.type === 'function').map((x: any) => x.method));\r\n\r\n                    const existingCall = objectContext.findActualMethodCall(propertyContext.name, argumentsList); \r\n                    if(!existingCall)\r\n                        return void 0;\r\n                    \r\n                    return propertyContext.method.returnValues[existingCall.callCount++];\r\n                }\r\n\r\n                const newMethodPropertyContext = propertyContext.promoteToMethod();\r\n                newMethodPropertyContext.method.arguments = argumentsList;\r\n                newMethodPropertyContext.method.returnValues = null;\r\n\r\n                return thisProxy;\r\n            },\r\n            get: (target, property) => {\r\n                if (typeof property === 'symbol') {\r\n                    if (property === Symbol.toPrimitive)\r\n                        return () => void 0;\r\n\r\n                    return void 0;\r\n                }\r\n\r\n                if (property === 'valueOf')\r\n                    return void 0;\r\n\r\n                if (property === 'toString')\r\n                    return (target[property] || '').toString();\r\n\r\n                if (property === 'inspect')\r\n                    return () => '{SubstituteJS fake}';\r\n\r\n                if (property === 'constructor')\r\n                    return () => thisProxy;\r\n\r\n                const currentPropertyContext = objectContext.property;\r\n                if (property === 'returns') {\r\n                    if(currentPropertyContext.type === 'object')\r\n                        return (...args: any[]) => currentPropertyContext.returnValues = args;\r\n\r\n                    if(currentPropertyContext.type === 'function')\r\n                        return (...args: any[]) => currentPropertyContext.method.returnValues = args;\r\n                }\r\n\r\n                if (property === 'received') {\r\n                    return (count?: number) => {\r\n                        if(count === void 0)\r\n                            count = null;\r\n\r\n                        objectContext.setExpectedCallCount(count);\r\n                        return thisProxy;\r\n                    };\r\n                }\r\n\r\n                const existingCall = objectContext.findActualPropertyCall(property.toString(), 'read');\r\n                if(existingCall) {\r\n                    const existingCallProperty = existingCall.property;\r\n                    if(existingCallProperty.type === 'function')\r\n                        return thisProxy;\r\n                    \r\n                    const expectedCall = objectContext.calls.expected;\r\n                    if(expectedCall && expectedCall.callCount !== void 0) {\r\n                        const expectedCallProperty = new ProxyPropertyContext();\r\n                        expectedCallProperty.access = 'read';\r\n                        expectedCallProperty.type = 'object';\r\n                        expectedCallProperty.name = property.toString();\r\n\r\n                        expectedCall.property = expectedCallProperty;\r\n\r\n                        let shouldFail = \r\n                            (expectedCall.callCount === null && existingCall.callCount === 0) ||\r\n                            (expectedCall.callCount !== null && expectedCall.callCount !== existingCall.callCount);\r\n\r\n                        if(shouldFail)\r\n                            throw new Error('Expected ' + (expectedCall.callCount === null ? 'at least one' : expectedCall.callCount) + ' call(s) to the method ' + expectedCallProperty.name + ', but received ' + existingCall.callCount + ' of such call(s).\\nOther calls received:' + stringifyCalls(expectedCallProperty, objectContext.calls.actual));\r\n\r\n                        return thisProxy;\r\n                    }\r\n\r\n                    if(!existingCallProperty.returnValues)\r\n                        return void 0;\r\n\r\n                    return existingCallProperty.returnValues[existingCall.callCount++];\r\n                }\r\n\r\n                const newPropertyContext = new ProxyPropertyContext();\r\n                newPropertyContext.name = property.toString();\r\n                newPropertyContext.type = 'object';\r\n                newPropertyContext.access = 'read';\r\n                newPropertyContext.returnValues = null;\r\n\r\n                objectContext.property = newPropertyContext;\r\n\r\n                objectContext.addActualPropertyCall();\r\n\r\n                return thisProxy;\r\n            }\r\n        }) as any;\r\n\r\n        // const findExistingCall = (calls: Call[]) => findCallMatchingArguments(calls, localRecord.arguments);\r\n\r\n        // const findOrCreateExistingCall = (calls: Call[]) => {\r\n        //     let existingCall = findExistingCall(calls);\r\n        //     if (!existingCall) {\r\n        //         existingCall = { \r\n        //             callCount: 0, \r\n        //             arguments: localRecord.arguments,\r\n        //             name: localRecord.property.toString()\r\n        //         };\r\n        //         calls.push(existingCall);\r\n        //     }\r\n\r\n        //     return existingCall;\r\n        // };\r\n\r\n        // const assertExpectedCalls = () => {\r\n        //     const existingCall = findExistingCall(localRecord.calls);\r\n        //     if(!localRecord.arguments || localRecord.arguments.length === 0 || ((localRecord.expectedCallCount === -1 && existingCall.callCount === 0) || (localRecord.expectedCallCount !== -1 && localRecord.expectedCallCount !== existingCall.callCount))) {\r\n        //         throw new Error('Expected ' + (localRecord.expectedCallCount === -1 ? 'at least one' : localRecord.expectedCallCount) + ' call(s) to the property ' + localRecord.property + ', but received ' + existingCall.callCount + ' of such call(s).\\nOther calls received:' + stringifyCalls(localRecord.calls));\r\n        //     }\r\n\r\n        //     const expectedCall = findExistingCall(localRecord.expectedCalls);\r\n        //     if (existingCall === null || ((expectedCall.callCount === -1 && existingCall.callCount === 0) || (expectedCall.callCount !== -1 && expectedCall.callCount !== existingCall.callCount))) {\r\n        //         throw new Error('Expected ' + (expectedCall.callCount === -1 ? 'at least one' : expectedCall.callCount) + ' call(s) to the method ' + localRecord.property + ' with arguments ' + stringifyArguments(expectedCall.arguments) + ', but received ' + existingCall.callCount + ' of such call(s).\\nOther calls received:' + stringifyCalls(localRecord.calls));\r\n        //     }\r\n        // }\r\n    }\r\n}"]}
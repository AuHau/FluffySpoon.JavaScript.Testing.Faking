{"version":3,"file":"Substitute.js","sourceRoot":"","sources":["../../src/Substitute.ts"],"names":[],"mappings":"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","sourcesContent":["export class Substitute {\r\n    static for<T>(): ObjectSubstitute<T> {\r\n\r\n        const createProxy = (r: any = null) => {\r\n            let localRecord: typeof lastRecord = r;\r\n\r\n            const findExistingCall = (calls: Call[]) => findCallMatchingArguments(calls, localRecord.arguments);\r\n\r\n            const findOrCreateExistingCall = (calls: Call[]) => {\r\n                let existingCall = findExistingCall(calls);\r\n                if (!existingCall) {\r\n                    existingCall = { \r\n                        callCount: 0, \r\n                        arguments: localRecord.arguments,\r\n                        name: localRecord.property.toString()\r\n                    };\r\n                    calls.push(existingCall);\r\n                }\r\n\r\n                return existingCall;\r\n            };\r\n\r\n            const assertExpectedCalls = () => {\r\n                const existingCall = findExistingCall(localRecord.calls);\r\n                if(!localRecord.arguments || localRecord.arguments.length === 0 || ((localRecord.expectedCallCount === -1 && existingCall.callCount === 0) || (localRecord.expectedCallCount !== -1 && localRecord.expectedCallCount !== existingCall.callCount))) {\r\n                    throw new Error('Expected ' + (localRecord.expectedCallCount === -1 ? 'at least one' : localRecord.expectedCallCount) + ' call(s) to the property ' + localRecord.property + ', but received ' + existingCall.callCount + ' of such call(s).\\nOther calls received:' + stringifyCalls(localRecord.calls));\r\n                }\r\n\r\n                const expectedCall = findExistingCall(localRecord.expectedCalls);\r\n                if (existingCall === null || ((expectedCall.callCount === -1 && existingCall.callCount === 0) || (expectedCall.callCount !== -1 && expectedCall.callCount !== existingCall.callCount))) {\r\n                    throw new Error('Expected ' + (expectedCall.callCount === -1 ? 'at least one' : expectedCall.callCount) + ' call(s) to the method ' + localRecord.property + ' with arguments ' + stringifyArguments(expectedCall.arguments) + ', but received ' + existingCall.callCount + ' of such call(s).\\nOther calls received:' + stringifyCalls(localRecord.calls));\r\n                }\r\n            }\r\n\r\n            let thisProxy: any;\r\n            return thisProxy = new Proxy(() => { }, {\r\n                apply: (_target, _thisArg, argumentsList) => {\r\n                    if (localRecord.arguments) {\r\n                        const existingCall = findOrCreateExistingCall(localRecord.calls);\r\n                        const expectedCall = findExistingCall(localRecord.expectedCalls);\r\n\r\n                        console.log(existingCall, expectedCall);\r\n                        \r\n                        if (expectedCall !== null) {\r\n\r\n                            assertExpectedCalls();\r\n                            return void 0;\r\n                        }\r\n\r\n                        existingCall.callCount++;\r\n\r\n                        if (!equals(localRecord.arguments, argumentsList))\r\n                            return void 0;\r\n\r\n                        return localRecord.shouldReturn[localRecord.currentReturnOffset++];\r\n                    }\r\n\r\n                    findOrCreateExistingCall(localRecord.expectedCalls);\r\n                    localRecord.arguments = [...argumentsList];\r\n\r\n                    return thisProxy;\r\n                },\r\n                get: (target, property) => {\r\n                    if (typeof property === 'symbol') {\r\n                        if (property === Symbol.toPrimitive)\r\n                            return () => void 0;\r\n\r\n                        return void 0;\r\n                    }\r\n\r\n                    if (property === 'valueOf')\r\n                        return void 0;\r\n\r\n                    if (property === 'toString')\r\n                        return (target[property] || '').toString();\r\n\r\n                    if (property === 'inspect')\r\n                        return () => \"{SubstituteJS fake}\";\r\n\r\n                    if (property === 'constructor')\r\n                        return () => thisProxy;\r\n\r\n                    if (property === 'returns')\r\n                        return (...args: any[]) => localRecord.shouldReturn = args;\r\n\r\n                    if (property === 'received') {\r\n                        return (count?: number) => {\r\n                            localRecord.expectedCallCount = (count === void 0 || count === null) ? -1 : count;\r\n\r\n                            return thisProxy;\r\n                        };\r\n                    }\r\n\r\n                    if (localRecord && localRecord.property === property) {\r\n                        if (localRecord.arguments)\r\n                            return thisProxy;\r\n\r\n                        const existingCall = findOrCreateExistingCall(localRecord.calls);\r\n\r\n                        const expectedCall = findExistingCall(localRecord.expectedCalls);\r\n                        if (expectedCall !== null) {\r\n                            assertExpectedCalls();\r\n                            return void 0;\r\n                        }\r\n\r\n                        existingCall.callCount++;\r\n\r\n                        return localRecord.shouldReturn[localRecord.currentReturnOffset++];\r\n                    }\r\n\r\n                    localRecord = createRecord();\r\n                    localRecord.property = property;\r\n\r\n                    return thisProxy;\r\n                }\r\n            });\r\n        };\r\n\r\n        return createProxy() as any;\r\n    }\r\n}"]}
{"version":3,"file":"Substitute.js","sourceRoot":"","sources":["../../src/Substitute.ts"],"names":[],"mappings":"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","sourcesContent":["import { ObjectSubstitute, OmitProxyMethods, DisabledSubstituteObject } from \"./Transformations\";\r\nimport { ProxyObjectContext, ProxyPropertyContext, ProxyMethodPropertyContext, ProxyCallRecord, ProxyExpectation } from \"./Context\";\r\nimport { stringifyCalls, stringifyArguments } from \"./Utilities\";\r\n\r\nconst areProxiesDisabledKey = Symbol.for('areProxiesDisabled');\r\nconst handlerKey = Symbol.for('handler');\r\nconst isFake = Symbol.for('isFake');\r\n\r\nconst internalSymbols = [areProxiesDisabledKey, handlerKey, isFake];\r\n\r\nexport class Substitute {\r\n    static isSubstitute<T>(instance: T) {\r\n        return instance[isFake];\r\n    }\r\n\r\n    static disableFor<T extends ObjectSubstitute<OmitProxyMethods<any>>>(substitute: T): DisabledSubstituteObject<T> {\r\n        const thisProxy = substitute as any;\r\n        const thisExposedProxy = thisProxy[handlerKey];\r\n\r\n        const disableProxy = <K extends Function>(f: K): K => {\r\n            return function() {\r\n                thisProxy[areProxiesDisabledKey] = true;\r\n                const returnValue = f.call(thisExposedProxy, ...arguments);\r\n                thisProxy[areProxiesDisabledKey] = false;\r\n                return returnValue;\r\n            } as any;\r\n        };\r\n\r\n        return new Proxy(() => { }, {\r\n            apply: disableProxy(thisExposedProxy.apply),\r\n            set: disableProxy(thisExposedProxy.set),\r\n            get: disableProxy(thisExposedProxy.get)\r\n        }) as any;\r\n    }\r\n\r\n    static for<T>(): ObjectSubstitute<OmitProxyMethods<T>, T> {\r\n        const objectContext = new ProxyObjectContext();\r\n\r\n        let thisProxy: ObjectSubstitute<T>;\r\n\r\n        const isProxyDisabled = () => thisProxy[areProxiesDisabledKey];\r\n        const isFluffySpoonProperty = (p: symbol) => internalSymbols.indexOf(p) !== -1;\r\n\r\n        const internalStore = Object.create(null) as any;\r\n        \r\n        var thisExposedProxy: ProxyHandler<any> = {\r\n            apply: (_target, _thisArg, argumentsList) => {\r\n                const propertyContext = objectContext.property;\r\n\r\n                const existingCalls = objectContext.findActualMethodCalls(propertyContext.name, argumentsList);\r\n                const existingCall = existingCalls[0];\r\n\r\n                const allCalls = objectContext.findActualMethodCalls(propertyContext.name);\r\n\r\n                if (propertyContext.type === 'function') {\r\n                    const expected = objectContext.calls.expected;\r\n                    if(expected && expected.callCount !== void 0) {\r\n                        expected.arguments = argumentsList;\r\n                        expected.propertyName = propertyContext.name;\r\n                        \r\n                        thisProxy[areProxiesDisabledKey] = false;\r\n                        \r\n                        this.assertCallMatchCount('method', expected, \r\n                            allCalls,\r\n                            existingCalls);\r\n                        return void 0;\r\n                    }\r\n\r\n                    if(existingCall) {\r\n                        existingCall.callCount++;\r\n\r\n                        if(existingCall.property.type === 'function') {\r\n                            const mimicks = existingCall.property.method.mimicks;\r\n                            if(mimicks) \r\n                                return mimicks.call(_target, ...argumentsList);\r\n                        }\r\n                    } else {\r\n                        propertyContext.method.arguments = argumentsList;\r\n                        objectContext.addActualPropertyCall();\r\n\r\n                        return void 0;\r\n                    }\r\n\r\n                    if(propertyContext.method.returnValues)\r\n                        return propertyContext.method.returnValues[existingCall.callCount - 1];\r\n                    \r\n                    return void 0;\r\n                }\r\n\r\n                const newMethodPropertyContext = propertyContext.promoteToMethod();\r\n                newMethodPropertyContext.method.arguments = argumentsList;\r\n                newMethodPropertyContext.method.returnValues = null;\r\n\r\n                objectContext.fixExistingCallArguments();\r\n\r\n                return thisProxy;\r\n            },\r\n            set: (_target, property, value) => {\r\n                if(isFluffySpoonProperty(property as symbol)) {\r\n                    internalStore[property] = value;\r\n                    return true;\r\n                }\r\n\r\n                const propertyContext = objectContext.property;\r\n                const argumentsList = [value];\r\n\r\n                let existingCalls = objectContext.findActualMethodCalls(propertyContext.name, argumentsList);\r\n                if (existingCalls.length > 0 && propertyContext.type === 'function') {\r\n                    const expected = objectContext.calls.expected;                    \r\n                    if (expected && expected.callCount !== void 0) {\r\n                        expected.arguments = argumentsList;\r\n                        expected.propertyName = propertyContext.name;\r\n                        \r\n                        thisProxy[areProxiesDisabledKey] = false;\r\n\r\n                        this.assertCallMatchCount('property', expected, \r\n                            objectContext.findActualMethodCalls(propertyContext.name),\r\n                            existingCalls);\r\n                        return true;\r\n                    }\r\n\r\n                    const existingCall = existingCalls[0];\r\n                    existingCall.callCount++;\r\n\r\n                    return true;\r\n                }\r\n\r\n                const newMethodPropertyContext = new ProxyMethodPropertyContext();\r\n                newMethodPropertyContext.name = property.toString();\r\n                newMethodPropertyContext.type = 'function';\r\n                newMethodPropertyContext.method.arguments = argumentsList;\r\n                newMethodPropertyContext.method.returnValues = argumentsList;\r\n\r\n                objectContext.property = newMethodPropertyContext;\r\n\r\n                objectContext.addActualPropertyCall();\r\n\r\n                return true;\r\n            },\r\n            get: (target, property) => {\r\n                if(isFluffySpoonProperty(property as symbol))\r\n                    return internalStore[property];\r\n\r\n                if (typeof property === 'symbol') {\r\n                    if (property === Symbol.toPrimitive)\r\n                        return () => void 0;\r\n                }\r\n\r\n                if (property === 'valueOf')\r\n                    return void 0;\r\n\r\n                if (property === 'toString')\r\n                    return (target[property] || '').toString();\r\n\r\n                if (property === 'inspect')\r\n                    return () => '{SubstituteJS fake}';\r\n\r\n                if (property === 'constructor')\r\n                    return () => thisProxy;\r\n\r\n                const currentPropertyContext = objectContext.property;\r\n                const addPropertyToObjectContext = () => {\r\n                    const existingCall = objectContext.findActualPropertyCalls(property.toString())[0] || null;\r\n                    if (existingCall) {\r\n                        const existingCallProperty = existingCall.property;\r\n                        if (existingCallProperty.type === 'function')\r\n                            return thisProxy;\r\n    \r\n                        const expected = objectContext.calls.expected;\r\n                        if (expected && expected.callCount !== void 0) {\r\n                            expected.propertyName = existingCallProperty.name;\r\n                        \r\n                            thisProxy[areProxiesDisabledKey] = false;\r\n    \r\n                            this.assertCallMatchCount('property', expected, [existingCall], [existingCall]);\r\n                            return thisProxy;\r\n                        }\r\n    \r\n                        existingCall.callCount++;\r\n    \r\n                        if (existingCallProperty.returnValues)\r\n                            return existingCallProperty.returnValues[existingCall.callCount - 1];\r\n                        \r\n                        const mimicks = existingCallProperty.mimicks;\r\n                        if(mimicks) \r\n                            return mimicks();\r\n    \r\n                        return void 0;\r\n                    }\r\n\r\n                    const newPropertyContext = new ProxyPropertyContext();\r\n                    newPropertyContext.name = property.toString();\r\n                    newPropertyContext.type = 'object';\r\n                    newPropertyContext.returnValues = null;\r\n\r\n                    objectContext.property = newPropertyContext;\r\n\r\n                    objectContext.addActualPropertyCall();\r\n\r\n                    return thisProxy;\r\n                };\r\n\r\n                if (property === 'returns' && !isProxyDisabled()) {\r\n                    const createReturnsFunction = (context: {returnValues, mimicks}) => {\r\n                        return (...args: any[]) => {\r\n                            context.returnValues = args;\r\n                            context.mimicks = void 0;\r\n\r\n                            objectContext.getLastCall().callCount--;\r\n                        };\r\n                    };\r\n\r\n                    if (currentPropertyContext.type === 'object')\r\n                        return createReturnsFunction(currentPropertyContext);\r\n\r\n                    if (currentPropertyContext.type === 'function')\r\n                        return createReturnsFunction(currentPropertyContext.method);\r\n                }\r\n\r\n                if(property === 'mimicks' && !isProxyDisabled()) {\r\n                    const createMimicksFunction = (context: {returnValues, mimicks}) => {\r\n                        return (value: Function) => {\r\n                            context.returnValues = void 0;\r\n                            context.mimicks = value;\r\n\r\n                            objectContext.getLastCall().callCount--;\r\n                        };\r\n                    };\r\n\r\n                    if(currentPropertyContext.type === 'object') \r\n                        return createMimicksFunction(currentPropertyContext);\r\n\r\n                    if(currentPropertyContext.type === 'function')\r\n                        return createMimicksFunction(currentPropertyContext.method);\r\n                }\r\n\r\n                if (!isProxyDisabled() && (property === 'received' || property === 'didNotReceive')) {\r\n                    return (count?: number, ...args) => {\r\n                        const shouldForwardCall = (typeof count !== 'number' && typeof count !== 'undefined') || args.length > 0 || isProxyDisabled();\r\n                        if(shouldForwardCall) {\r\n                            addPropertyToObjectContext();\r\n                            return thisExposedProxy.apply(target, target, [count, ...args]);\r\n                        }\r\n\r\n                        if (count === void 0)\r\n                            count = null;\r\n\r\n                        objectContext.setExpectations(count, property === 'didNotReceive');\r\n                        thisProxy[areProxiesDisabledKey] = true;\r\n\r\n                        return thisProxy;\r\n                    };\r\n                }\r\n\r\n                return addPropertyToObjectContext();\r\n            }\r\n        };\r\n\r\n        thisProxy = new Proxy(() => { }, thisExposedProxy) as any;\r\n\r\n        thisProxy[areProxiesDisabledKey] = false;\r\n        thisProxy[isFake] = true;\r\n        thisProxy[handlerKey] = thisExposedProxy;\r\n\r\n        return thisProxy;\r\n    }\r\n\r\n    private static assertCallMatchCount(\r\n        type: 'property' | 'method', \r\n        expected: ProxyExpectation, \r\n        allCalls: ProxyCallRecord[],\r\n        matchingCalls: ProxyCallRecord[]): void \r\n    {\r\n        const getCallCounts = (calls: ProxyCallRecord[]) => {\r\n            const callCounts = calls.map(x => x.callCount);\r\n            const totalCallCount = callCounts.length === 0 ? 0 : callCounts.reduce((accumulator, value) => accumulator + value);\r\n            return totalCallCount;\r\n        }\r\n\r\n        const matchingCallsCount = getCallCounts(matchingCalls);\r\n\r\n        const isMatch = \r\n        !(\r\n            (\r\n                !expected.negated && (\r\n                    (expected.callCount === null && matchingCallsCount === 0) ||\r\n                    (expected.callCount !== null && expected.callCount !== matchingCallsCount)\r\n                )\r\n            ) ||\r\n            (\r\n                expected.negated && (\r\n                    (expected.callCount === null && matchingCallsCount !== 0) ||\r\n                    (expected.callCount !== null && expected.callCount === matchingCallsCount)\r\n                )\r\n            )\r\n        );\r\n        \r\n        if (!isMatch) {\r\n            let errorMessage = '';\r\n\r\n            errorMessage += expected.negated ? 'Did not expect' : 'Expected';\r\n            errorMessage += ' ';\r\n            errorMessage += expected.callCount === null ? 'one or more' : expected.callCount;\r\n            errorMessage += ' call';\r\n            errorMessage += (expected.callCount === null || expected.callCount !== 1) ? 's' : '';\r\n            errorMessage += ' to the ';\r\n            errorMessage += type;\r\n            errorMessage += ' ';\r\n            errorMessage += expected.propertyName;\r\n\r\n            if(expected.arguments) {\r\n                if(type === 'property') {\r\n                    errorMessage += ' with value ';\r\n\r\n                    const value = expected.arguments[0];\r\n                    if(value === null)\r\n                        errorMessage += 'null';\r\n                    \r\n                    if(value === void 0)\r\n                        errorMessage += 'undefined';\r\n\r\n                    if(value)\r\n                        errorMessage += value;\r\n                } else if(type === 'method') {\r\n                    errorMessage += ' with ';\r\n                    errorMessage += stringifyArguments(expected.arguments);\r\n                }\r\n            }\r\n\r\n            errorMessage += ', but received ';\r\n            errorMessage += matchingCallsCount === 0 ? 'none' : matchingCallsCount;\r\n\r\n            if(expected.arguments) {\r\n                errorMessage += ' of such call';\r\n                errorMessage += matchingCallsCount !== 1 ? 's' : '';\r\n            }\r\n\r\n            errorMessage += '.';\r\n\r\n            if(expected.arguments) {\r\n                errorMessage += '\\nAll calls received to ';\r\n                errorMessage += type;\r\n                errorMessage += ' ';\r\n                errorMessage += expected.propertyName;\r\n                errorMessage += ':';\r\n                errorMessage += stringifyCalls(allCalls);\r\n            }\r\n\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}"]}
{"version":3,"file":"Substitute.js","sourceRoot":"","sources":["../../src/Substitute.ts"],"names":[],"mappings":"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","sourcesContent":["import { ObjectSubstitute } from \"./Transformations\";\r\nimport { ProxyObjectContext, ProxyPropertyContext, ProxyMethodPropertyContext, ProxyCallRecord, ProxyExpectation } from \"./Context\";\r\nimport { stringifyCalls, stringifyArguments } from \"./Utilities\";\r\n\r\nexport class Substitute {\r\n    static for<T>(): ObjectSubstitute<T> {\r\n        const objectContext = new ProxyObjectContext();\r\n        \r\n        let thisProxy: ObjectSubstitute<T>;\r\n        return thisProxy = new Proxy(() => { }, {\r\n            apply: (_target, _thisArg, argumentsList) => {\r\n                const propertyContext = objectContext.property;\r\n                if(propertyContext.type === 'function') {\r\n                    let existingCall = objectContext.findActualMethodCall(propertyContext.name, argumentsList); \r\n                    if(!existingCall)\r\n                        return void 0;\r\n\r\n                    const expected = objectContext.calls.expected;\r\n                    if(expected && expected.callCount !== void 0) {\r\n                        if(!this.doesExistingCallMatchCount(expected, existingCall))\r\n                            throw new Error((expected.negated ? 'Dit not expect' : 'Expected') + ' ' + (expected.callCount === null ? 'more than 0' : expected.callCount) + ' call(s) to the method ' + existingCall.property.name + ' with arguments ' + stringifyArguments(argumentsList) + ', but received ' + existingCall.callCount + ' of such call(s).\\nOther calls received:' + stringifyCalls(existingCall.property.name, objectContext.calls.actual));\r\n\r\n                        return thisProxy;\r\n                    }\r\n                    \r\n                    const callCount = existingCall ? existingCall.callCount++ : 0;\r\n                    return propertyContext.method.returnValues[callCount];\r\n                }\r\n\r\n                const newMethodPropertyContext = propertyContext.promoteToMethod();\r\n                newMethodPropertyContext.method.arguments = argumentsList;\r\n                newMethodPropertyContext.method.returnValues = null;\r\n\r\n                return thisProxy;\r\n            },\r\n            set: (_target, property, value) => {\r\n                const propertyContext = objectContext.property;\r\n                const argumentsList = [value];\r\n\r\n                let existingCall = objectContext.findActualMethodCall(propertyContext.name, argumentsList); \r\n                if(existingCall && propertyContext.type === 'function') {                    \r\n                    const expected = objectContext.calls.expected;\r\n                    if(expected && expected.callCount !== void 0) {\r\n                        console.log('find', '\\n', propertyContext, '\\n', existingCall);\r\n                        console.log('expected', expected);\r\n                        \r\n                        if(!this.doesExistingCallMatchCount(expected, existingCall))\r\n                            throw new Error((expected.negated ? 'Dit not expect' : 'Expected') + ' ' + (expected.callCount === null ? 'more than 0' : expected.callCount) + ' call(s) to the property ' + existingCall.property.name + ' with value [' + value + '], but received ' + existingCall.callCount + ' of such call(s).\\nOther calls received:' + stringifyCalls(existingCall.property.name, objectContext.calls.actual));\r\n\r\n                        return true;\r\n                    }\r\n                    \r\n                    existingCall.callCount++;\r\n                    return true;\r\n                }\r\n\r\n                const newMethodPropertyContext = new ProxyMethodPropertyContext();\r\n                newMethodPropertyContext.name = property.toString();\r\n                newMethodPropertyContext.type = 'function';\r\n                newMethodPropertyContext.method.arguments = argumentsList;\r\n                newMethodPropertyContext.method.returnValues = argumentsList;\r\n\r\n                objectContext.property = newMethodPropertyContext;\r\n\r\n                const call = objectContext.addActualPropertyCall();\r\n                call.callCount = 1;\r\n\r\n                return true;\r\n            },\r\n            get: (target, property) => {\r\n                if (typeof property === 'symbol') {\r\n                    if (property === Symbol.toPrimitive)\r\n                        return () => void 0;\r\n\r\n                    return void 0;\r\n                }\r\n\r\n                if (property === 'valueOf')\r\n                    return void 0;\r\n\r\n                if (property === 'toString')\r\n                    return (target[property] || '').toString();\r\n\r\n                if (property === 'inspect')\r\n                    return () => '{SubstituteJS fake}';\r\n\r\n                if (property === 'constructor')\r\n                    return () => thisProxy;\r\n\r\n                const currentPropertyContext = objectContext.property;\r\n                if (property === 'returns') {\r\n                    if(currentPropertyContext.type === 'object')\r\n                        return (...args: any[]) => currentPropertyContext.returnValues = args;\r\n\r\n                    if(currentPropertyContext.type === 'function')\r\n                        return (...args: any[]) => currentPropertyContext.method.returnValues = args;\r\n                }\r\n\r\n                if (property === 'received' || property === 'didNotReceive') {\r\n                    return (count?: number) => {\r\n                        if(count === void 0)\r\n                            count = null;\r\n\r\n                        objectContext.setExpectations(count, property === 'didNotReceive');\r\n                        return thisProxy;\r\n                    };\r\n                }\r\n\r\n                const existingCall = objectContext.findActualPropertyCall(property.toString());\r\n                if(existingCall) {\r\n                    const existingCallProperty = existingCall.property;\r\n                    if(existingCallProperty.type === 'function')\r\n                        return thisProxy;\r\n                    \r\n                    const expected = objectContext.calls.expected;\r\n                    if(expected && expected.callCount !== void 0) {\r\n                        if(!this.doesExistingCallMatchCount(expected, existingCall))\r\n                            throw new Error((expected.negated ? 'Dit not expect' : 'Expected') + ' ' + (expected.callCount === null ? 'more than 0' : expected.callCount) + ' call(s) to the property ' + existingCall.property.name + ', but received ' + existingCall.callCount + ' of such call(s).\\nOther calls received:' + stringifyCalls(existingCall.property.name, objectContext.calls.actual));\r\n\r\n                        return thisProxy;\r\n                    }\r\n\r\n                    if(!existingCallProperty.returnValues)\r\n                        return void 0;\r\n\r\n                    return existingCallProperty.returnValues[existingCall.callCount++];\r\n                }\r\n\r\n                const newPropertyContext = new ProxyPropertyContext();\r\n                newPropertyContext.name = property.toString();\r\n                newPropertyContext.type = 'object';\r\n                newPropertyContext.returnValues = null;\r\n\r\n                objectContext.property = newPropertyContext;\r\n\r\n                objectContext.addActualPropertyCall();\r\n\r\n                return thisProxy;\r\n            }\r\n        }) as any;\r\n    }\r\n\r\n    private static doesExistingCallMatchCount(expected: ProxyExpectation, existingCall: ProxyCallRecord) {\r\n        return !(\r\n            (\r\n                !expected.negated && (\r\n                    (expected.callCount === null && existingCall.callCount === 0) ||\r\n                    (expected.callCount !== null && expected.callCount !== existingCall.callCount)\r\n                )\r\n            ) ||\r\n            (\r\n                expected.negated && (\r\n                    (expected.callCount === null && existingCall.callCount !== 0) ||\r\n                    (expected.callCount !== null && expected.callCount === existingCall.callCount)\r\n                )\r\n            )\r\n        );\r\n        \r\n    }\r\n}"]}